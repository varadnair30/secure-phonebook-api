{
	"info": {
		"_postman_id": "a19193dc-84a4-41f4-8591-4a83c91e0243",
		"name": "SecureAPI",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39750100"
	},
	"item": [
		{
			"name": "reader user",
			"item": [
				{
					"name": "create Reader",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "'application/json'",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"user1\",\r\n  \"password\": \"password123\",\r\n  \"role\": \"Read/Write\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/users/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Reader Login",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "List Phonebook",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Read/Write user",
			"item": [
				{
					"name": "create Reader|Writer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "'application/json'",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"user1\",\r\n  \"password\": \"password123\",\r\n  \"role\": \"Read/Write\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/users/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Reader|writer Login",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "List Phonebook",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "deleteByName",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "deleteByNumber",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "Add Entry",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMSIsInJvbGUiOiJSZWFkL1dyaXRlIiwiZXhwIjoxNzMxMjk1MTE4fQ.mBxrysenXCF52L3ipVdThTHTQ4p0VGQgIkkVXXHASnQ",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/PhoneBook/add",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"PhoneBook",
								"add"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unit Testing",
			"item": [
				{
					"name": "Bruce Schneier Pass",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMSIsInJvbGUiOiJSZWFkL1dyaXRlIiwiZXhwIjoxNzMxMjk1MTE4fQ.mBxrysenXCF52L3ipVdThTHTQ4p0VGQgIkkVXXHASnQ",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/PhoneBook/add",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"PhoneBook",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schneier, Bruce Pass",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMSIsInJvbGUiOiJSZWFkL1dyaXRlIiwiZXhwIjoxNzMxMjk1MTE4fQ.mBxrysenXCF52L3ipVdThTHTQ4p0VGQgIkkVXXHASnQ",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/PhoneBook/add",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"PhoneBook",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Schneier, Bruce Wayne Fail",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMSIsInJvbGUiOiJSZWFkL1dyaXRlIiwiZXhwIjoxNzMxMjk1MTE4fQ.mBxrysenXCF52L3ipVdThTHTQ4p0VGQgIkkVXXHASnQ",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/PhoneBook/add",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"PhoneBook",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Oâ€™Malley, John F. FAil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests tab content\r",
									"\r",
									"// Define all test cases with names and fixed phone number +111222\r",
									"const testCases = [\r",
									"    \"Ron Oâ€™â€™Henry\",\r",
									"    \"Ron Oâ€™Henry-Smith-Barnes\",\r",
									"    \"L33t Hacker\",\r",
									"    \"<Script>alert(\\\"XSS\\\")</Script>\",\r",
									"    \"Brad Everett Samuel Smith\",\r",
									"    \"select * from users;\",\r",
									"    // Adding additional unacceptable names to make it 12\r",
									"    \"Invalid@Name\",\r",
									"    \"Another$BadName\",\r",
									"    \"BadName#123\",\r",
									"    \"BadName%Name\",\r",
									"    \"BadName&Name\",\r",
									"    \"BadName*Name\"\r",
									"];\r",
									"\r",
									"// Fixed phone number for unacceptable inputs\r",
									"const fixedPhoneNumber = \"+111222\";\r",
									"\r",
									"// Array to store test results\r",
									"let testResults = [];\r",
									"\r",
									"// Function to perform a single test case\r",
									"function performTestCase(name, phoneNumber, index, callback) {\r",
									"    pm.sendRequest({\r",
									"        url: pm.request.url.toString(),\r",
									"        method: pm.request.method,\r",
									"        header: pm.request.headers,\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify({\r",
									"                \"name\": name,\r",
									"                \"phoneNumber\": phoneNumber\r",
									"            })\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            testResults.push({\r",
									"                testCase: name,\r",
									"                result: \"Error\",\r",
									"                message: err.message\r",
									"            });\r",
									"        } else {\r",
									"            // Expected status code is 400 for unacceptable inputs\r",
									"            const expectedStatus = 400;\r",
									"            const actualStatus = res.status;\r",
									"\r",
									"            // Validate status code\r",
									"            if (actualStatus === expectedStatus) {\r",
									"                // Further check if error detail is present\r",
									"                const jsonData = res.json();\r",
									"                if (jsonData.detail) {\r",
									"                    testResults.push({\r",
									"                        testCase: name,\r",
									"                        result: \"Passed\",\r",
									"                        message: `Received expected status ${expectedStatus} with error detail.`\r",
									"                    });\r",
									"                } else {\r",
									"                    testResults.push({\r",
									"                        testCase: name,\r",
									"                        result: \"Failed\",\r",
									"                        message: `Received status ${actualStatus} but no error detail present.`\r",
									"                    });\r",
									"                }\r",
									"            } else {\r",
									"                testResults.push({\r",
									"                    testCase: name,\r",
									"                    result: \"Failed\",\r",
									"                    message: `Expected status ${expectedStatus} but received ${actualStatus}.`\r",
									"                });\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Proceed to the next test case\r",
									"        callback();\r",
									"    });\r",
									"}\r",
									"\r",
									"// Recursive function to execute test cases sequentially\r",
									"function runTestCases(index) {\r",
									"    if (index < testCases.length) {\r",
									"        const currentName = testCases[index];\r",
									"        performTestCase(currentName, fixedPhoneNumber, index, function () {\r",
									"            runTestCases(index + 1);\r",
									"        });\r",
									"    } else {\r",
									"        // All test cases have been processed\r",
									"        // Log the report\r",
									"        console.log(\"Batch Test Report:\");\r",
									"        testResults.forEach((entry, idx) => {\r",
									"            console.log(`${idx + 1}. Name: ${entry.testCase} | Result: ${entry.result} | Message: ${entry.message}`);\r",
									"        });\r",
									"\r",
									"        // Optionally, you can set the report as an environment variable\r",
									"        pm.environment.set(\"batch_test_report\", JSON.stringify(testResults));\r",
									"\r",
									"        // You can also assert that all test cases passed\r",
									"        const failedTests = testResults.filter(entry => entry.result !== \"Passed\");\r",
									"        pm.test(\"All unacceptable input test cases passed\", function () {\r",
									"            pm.expect(failedTests.length, `Failed Test Cases: ${JSON.stringify(failedTests)}`).to.equal(0);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"// Start running test cases\r",
									"runTestCases(0);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ3cml0ZXIiLCJyb2xlIjoiUmVhZC9Xcml0ZSIsImV4cCI6MTczMTU3NDkzOH0.MXHIBWuec3GdgTEn_Dzz_sOOOwPVHKRWwiTQVAVNeNI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Oâ€™Malley, John F.\",\r\n    \"phone_number\": \"+11111111\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/PhoneBook/add",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"PhoneBook",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Oâ€™Malley, John F. FAil Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests tab content\r",
									"\r",
									"// Define all test cases with names and fixed phone number +111222\r",
									"const testCases = [\r",
									"    \"Ron Oâ€™â€™Henry\",\r",
									"    \"Ron Oâ€™Henry-Smith-Barnes\",\r",
									"    \"L33t Hacker\",\r",
									"    \"<Script>alert(\\\"XSS\\\")</Script>\",\r",
									"    \"Brad Everett Samuel Smith\",\r",
									"    \"select * from users;\",\r",
									"    // Adding additional unacceptable names to make it 12\r",
									"    \"Invalid@Name\",\r",
									"    \"Another$BadName\",\r",
									"    \"BadName#123\",\r",
									"    \"BadName%Name\",\r",
									"    \"BadName&Name\",\r",
									"    \"BadName*Name\"\r",
									"];\r",
									"\r",
									"// Fixed phone number for unacceptable inputs\r",
									"const fixedPhoneNumber = \"+111222\";\r",
									"\r",
									"// Array to store test results\r",
									"let testResults = [];\r",
									"\r",
									"// Function to perform a single test case\r",
									"function performTestCase(name, phoneNumber, index, callback) {\r",
									"    pm.sendRequest({\r",
									"        url: pm.request.url.toString(),\r",
									"        method: pm.request.method,\r",
									"        header: pm.request.headers,\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify({\r",
									"                \"name\": name,\r",
									"                \"phoneNumber\": phoneNumber\r",
									"            })\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            testResults.push({\r",
									"                testCase: name,\r",
									"                result: \"Error\",\r",
									"                message: err.message\r",
									"            });\r",
									"        } else {\r",
									"            // Expected status code is 400 for unacceptable inputs\r",
									"            const expectedStatus = 400;\r",
									"            const actualStatus = res.status;\r",
									"\r",
									"            // Validate status code\r",
									"            if (actualStatus === expectedStatus) {\r",
									"                // Further check if error detail is present\r",
									"                const jsonData = res.json();\r",
									"                if (jsonData.detail) {\r",
									"                    testResults.push({\r",
									"                        testCase: name,\r",
									"                        result: \"Passed\",\r",
									"                        message: `Received expected status ${expectedStatus} with error detail.`\r",
									"                    });\r",
									"                } else {\r",
									"                    testResults.push({\r",
									"                        testCase: name,\r",
									"                        result: \"Failed\",\r",
									"                        message: `Received status ${actualStatus} but no error detail present.`\r",
									"                    });\r",
									"                }\r",
									"            } else {\r",
									"                testResults.push({\r",
									"                    testCase: name,\r",
									"                    result: \"Failed\",\r",
									"                    message: `Expected status ${expectedStatus} but received ${actualStatus}.`\r",
									"                });\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Proceed to the next test case\r",
									"        callback();\r",
									"    });\r",
									"}\r",
									"\r",
									"// Recursive function to execute test cases sequentially\r",
									"function runTestCases(index) {\r",
									"    if (index < testCases.length) {\r",
									"        const currentName = testCases[index];\r",
									"        performTestCase(currentName, fixedPhoneNumber, index, function () {\r",
									"            runTestCases(index + 1);\r",
									"        });\r",
									"    } else {\r",
									"        // All test cases have been processed\r",
									"        // Log the report\r",
									"        console.log(\"Batch Test Report:\");\r",
									"        testResults.forEach((entry, idx) => {\r",
									"            console.log(`${idx + 1}. Name: ${entry.testCase} | Result: ${entry.result} | Message: ${entry.message}`);\r",
									"        });\r",
									"\r",
									"        // Optionally, you can set the report as an environment variable\r",
									"        pm.environment.set(\"batch_test_report\", JSON.stringify(testResults));\r",
									"\r",
									"        // You can also assert that all test cases passed\r",
									"        const failedTests = testResults.filter(entry => entry.result !== \"Passed\");\r",
									"        pm.test(\"All unacceptable input test cases passed\", function () {\r",
									"            pm.expect(failedTests.length, `Failed Test Cases: ${JSON.stringify(failedTests)}`).to.equal(0);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"// Start running test cases\r",
									"runTestCases(0);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ3cml0ZXIiLCJyb2xlIjoiUmVhZC9Xcml0ZSIsImV4cCI6MTczMTU3NDkzOH0.MXHIBWuec3GdgTEn_Dzz_sOOOwPVHKRWwiTQVAVNeNI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Oâ€™Malley, John F.\",\r\n    \"phone_number\": \"+11111111\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/PhoneBook/add",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"PhoneBook",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cher Pas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests tab content\r",
									"\r",
									"// Define all test cases with names and fixed phone number +111222\r",
									"const testCases = [\r",
									"    \"Ron Oâ€™â€™Henry\",\r",
									"    \"Ron Oâ€™Henry-Smith-Barnes\",\r",
									"    \"L33t Hacker\",\r",
									"    \"<Script>alert(\\\"XSS\\\")</Script>\",\r",
									"    \"Brad Everett Samuel Smith\",\r",
									"    \"select * from users;\",\r",
									"    // Adding additional unacceptable names to make it 12\r",
									"    \"Invalid@Name\",\r",
									"    \"Another$BadName\",\r",
									"    \"BadName#123\",\r",
									"    \"BadName%Name\",\r",
									"    \"BadName&Name\",\r",
									"    \"BadName*Name\"\r",
									"];\r",
									"\r",
									"// Fixed phone number for unacceptable inputs\r",
									"const fixedPhoneNumber = \"+111222\";\r",
									"\r",
									"// Array to store test results\r",
									"let testResults = [];\r",
									"\r",
									"// Function to perform a single test case\r",
									"function performTestCase(name, phoneNumber, index, callback) {\r",
									"    pm.sendRequest({\r",
									"        url: pm.request.url.toString(),\r",
									"        method: pm.request.method,\r",
									"        header: pm.request.headers,\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify({\r",
									"                \"name\": name,\r",
									"                \"phoneNumber\": phoneNumber\r",
									"            })\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            testResults.push({\r",
									"                testCase: name,\r",
									"                result: \"Error\",\r",
									"                message: err.message\r",
									"            });\r",
									"        } else {\r",
									"            // Expected status code is 400 for unacceptable inputs\r",
									"            const expectedStatus = 400;\r",
									"            const actualStatus = res.status;\r",
									"\r",
									"            // Validate status code\r",
									"            if (actualStatus === expectedStatus) {\r",
									"                // Further check if error detail is present\r",
									"                const jsonData = res.json();\r",
									"                if (jsonData.detail) {\r",
									"                    testResults.push({\r",
									"                        testCase: name,\r",
									"                        result: \"Passed\",\r",
									"                        message: `Received expected status ${expectedStatus} with error detail.`\r",
									"                    });\r",
									"                } else {\r",
									"                    testResults.push({\r",
									"                        testCase: name,\r",
									"                        result: \"Failed\",\r",
									"                        message: `Received status ${actualStatus} but no error detail present.`\r",
									"                    });\r",
									"                }\r",
									"            } else {\r",
									"                testResults.push({\r",
									"                    testCase: name,\r",
									"                    result: \"Failed\",\r",
									"                    message: `Expected status ${expectedStatus} but received ${actualStatus}.`\r",
									"                });\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Proceed to the next test case\r",
									"        callback();\r",
									"    });\r",
									"}\r",
									"\r",
									"// Recursive function to execute test cases sequentially\r",
									"function runTestCases(index) {\r",
									"    if (index < testCases.length) {\r",
									"        const currentName = testCases[index];\r",
									"        performTestCase(currentName, fixedPhoneNumber, index, function () {\r",
									"            runTestCases(index + 1);\r",
									"        });\r",
									"    } else {\r",
									"        // All test cases have been processed\r",
									"        // Log the report\r",
									"        console.log(\"Batch Test Report:\");\r",
									"        testResults.forEach((entry, idx) => {\r",
									"            console.log(`${idx + 1}. Name: ${entry.testCase} | Result: ${entry.result} | Message: ${entry.message}`);\r",
									"        });\r",
									"\r",
									"        // Optionally, you can set the report as an environment variable\r",
									"        pm.environment.set(\"batch_test_report\", JSON.stringify(testResults));\r",
									"\r",
									"        // You can also assert that all test cases passed\r",
									"        const failedTests = testResults.filter(entry => entry.result !== \"Passed\");\r",
									"        pm.test(\"All unacceptable input test cases passed\", function () {\r",
									"            pm.expect(failedTests.length, `Failed Test Cases: ${JSON.stringify(failedTests)}`).to.equal(0);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"// Start running test cases\r",
									"runTestCases(0);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ3cml0ZXIiLCJyb2xlIjoiUmVhZC9Xcml0ZSIsImV4cCI6MTczMTU3NDkzOH0.MXHIBWuec3GdgTEn_Dzz_sOOOwPVHKRWwiTQVAVNeNI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Oâ€™Malley, John F.\",\r\n    \"phone_number\": \"+11111111\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/PhoneBook/add",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"PhoneBook",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cher Pas Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests tab content\r",
									"\r",
									"// Define all test cases with names and fixed phone number +111222\r",
									"const testCases = [\r",
									"    \"Ron Oâ€™â€™Henry\",\r",
									"    \"Ron Oâ€™Henry-Smith-Barnes\",\r",
									"    \"L33t Hacker\",\r",
									"    \"<Script>alert(\\\"XSS\\\")</Script>\",\r",
									"    \"Brad Everett Samuel Smith\",\r",
									"    \"select * from users;\",\r",
									"    // Adding additional unacceptable names to make it 12\r",
									"    \"Invalid@Name\",\r",
									"    \"Another$BadName\",\r",
									"    \"BadName#123\",\r",
									"    \"BadName%Name\",\r",
									"    \"BadName&Name\",\r",
									"    \"BadName*Name\"\r",
									"];\r",
									"\r",
									"// Fixed phone number for unacceptable inputs\r",
									"const fixedPhoneNumber = \"+111222\";\r",
									"\r",
									"// Array to store test results\r",
									"let testResults = [];\r",
									"\r",
									"// Function to perform a single test case\r",
									"function performTestCase(name, phoneNumber, index, callback) {\r",
									"    pm.sendRequest({\r",
									"        url: pm.request.url.toString(),\r",
									"        method: pm.request.method,\r",
									"        header: pm.request.headers,\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify({\r",
									"                \"name\": name,\r",
									"                \"phoneNumber\": phoneNumber\r",
									"            })\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            testResults.push({\r",
									"                testCase: name,\r",
									"                result: \"Error\",\r",
									"                message: err.message\r",
									"            });\r",
									"        } else {\r",
									"            // Expected status code is 400 for unacceptable inputs\r",
									"            const expectedStatus = 400;\r",
									"            const actualStatus = res.status;\r",
									"\r",
									"            // Validate status code\r",
									"            if (actualStatus === expectedStatus) {\r",
									"                // Further check if error detail is present\r",
									"                const jsonData = res.json();\r",
									"                if (jsonData.detail) {\r",
									"                    testResults.push({\r",
									"                        testCase: name,\r",
									"                        result: \"Passed\",\r",
									"                        message: `Received expected status ${expectedStatus} with error detail.`\r",
									"                    });\r",
									"                } else {\r",
									"                    testResults.push({\r",
									"                        testCase: name,\r",
									"                        result: \"Failed\",\r",
									"                        message: `Received status ${actualStatus} but no error detail present.`\r",
									"                    });\r",
									"                }\r",
									"            } else {\r",
									"                testResults.push({\r",
									"                    testCase: name,\r",
									"                    result: \"Failed\",\r",
									"                    message: `Expected status ${expectedStatus} but received ${actualStatus}.`\r",
									"                });\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // Proceed to the next test case\r",
									"        callback();\r",
									"    });\r",
									"}\r",
									"\r",
									"// Recursive function to execute test cases sequentially\r",
									"function runTestCases(index) {\r",
									"    if (index < testCases.length) {\r",
									"        const currentName = testCases[index];\r",
									"        performTestCase(currentName, fixedPhoneNumber, index, function () {\r",
									"            runTestCases(index + 1);\r",
									"        });\r",
									"    } else {\r",
									"        // All test cases have been processed\r",
									"        // Log the report\r",
									"        console.log(\"Batch Test Report:\");\r",
									"        testResults.forEach((entry, idx) => {\r",
									"            console.log(`${idx + 1}. Name: ${entry.testCase} | Result: ${entry.result} | Message: ${entry.message}`);\r",
									"        });\r",
									"\r",
									"        // Optionally, you can set the report as an environment variable\r",
									"        pm.environment.set(\"batch_test_report\", JSON.stringify(testResults));\r",
									"\r",
									"        // You can also assert that all test cases passed\r",
									"        const failedTests = testResults.filter(entry => entry.result !== \"Passed\");\r",
									"        pm.test(\"All unacceptable input test cases passed\", function () {\r",
									"            pm.expect(failedTests.length, `Failed Test Cases: ${JSON.stringify(failedTests)}`).to.equal(0);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"// Start running test cases\r",
									"runTestCases(0);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ3cml0ZXIiLCJyb2xlIjoiUmVhZC9Xcml0ZSIsImV4cCI6MTczMTU3NDkzOH0.MXHIBWuec3GdgTEn_Dzz_sOOOwPVHKRWwiTQVAVNeNI",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Oâ€™Malley, John F.\",\r\n    \"phone_number\": \"+11111111\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/PhoneBook/add",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"PhoneBook",
								"add"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}